	/**
     * tick-method for laser-tag challenge in SS2020 in WP-AI&Agenten. 
     *
     * Usable for every color. 
     *
     * @team Raues Endoplasmatisches Retikulum
     * @author Bastian Krammer
     * @author Christian Dorn
     * @author Frank Kindler
     * @author Jonathan StrÃ¶bele
     * @author Nils-Ole Bickel
     * @author Paul Richter
     * 
     */
    tick {
		//println "[" + color + ":" + memberID + "] at " + xcor + ", " + ycor + " actionPoints: " + actionPoints + " energy: " + energy + " simtime: " + simtime
		
		var prevEnemyX : real = stage%1000
		var prevEnemyY : real = (stage/1000)%1000
		var wasOnHillCounter : integer = (stage/1000/1000)%100

		var enemyLocated = ((prevEnemyX > 0) or (prevEnemyY > 0))

		stage = (stage / 1000000) * 1000000		

		if (wasTagged) {
			
			// START: moveRandomInTeam()
			var time: integer = (simtime%120)/20
			
			var randomX = 0
			var randomY = 0
			
			switch(time) {
				case 0: {
					randomX = 14
					randomY = 28
				}
				case 1: {
					randomX = 26
					randomY = 44
				}
				case 2: {
					randomX = 27
					randomY = 7
				}
				case 3: {
					randomX = 38
					randomY = 25
				}
				case 4: {
					randomX = 17
					randomY = 18
				}
				case 5: {
					randomX = 33
					randomY = 36
				}
			}

			goTo(randomX, randomY)
			// END: moveRandomInTeam()

			if (enemyLocated) {
				
				// lie down, if not already 'lying'
				if (currStance !== 'lying') {
					changeStance('lying')
				}
				
				// shoot twice! if possible
				if (hasBeeline(prevEnemyX, prevEnemyY)) {
					tag(prevEnemyX, prevEnemyY)
					tag(prevEnemyX, prevEnemyY)
				}else {
				// START: shootEnemies()
				// stand up if 'lying'
				if (currStance === 'lying' and actionPoints > 7) {
					changeStance('standing')
				}

				var enemies = exploreEnemies()

				if (currStance === 'standing' and actionPoints > 6) {
					changeStance('lying')
				}

				if (length(enemies.Item1) > 0 or length(enemies.Item2) > 0 or length(enemies.Item3) > 0) {

					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) } 
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'lying'){	tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'lying'){	tag(enemie) }
					}
					// shoot!
				} else {
					//loop
					for (var i = 0; i < 1000; i++) {}

					// check if team mate has found something
					
					if(enemiesFromTeam.Size() > 0){
						var size = enemiesFromTeam.Size
						for ( var i = 0; i < size; i++) {
							var enemy = enemiesFromTeam.Get(i)
							if(hasBeeline(enemy.Item1, enemy.Item2)){
								tag(enemy.Item1, enemy.Item2)
							} 
						}
					}

					// lie down, reload if possible, and hope for the best!
				}
				// END: shootEnemies()
				}
	
			} else {
				// START: shootEnemies()
				// stand up if 'lying'
				if (currStance === 'lying' and actionPoints > 7) {
					changeStance('standing')
				}

				var enemies = exploreEnemies()

				if (currStance === 'standing' and actionPoints > 6) {
					changeStance('lying')
				}

				if (length(enemies.Item1) > 0 or length(enemies.Item2) > 0 or length(enemies.Item3) > 0) {

					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					// shoot!
				} else {
					//loop
					for (var i = 0; i < 1000; i++) {}

					// check if team mate has found something
					
					if(enemiesFromTeam.Size() > 0){
						var size = enemiesFromTeam.Size
						for ( var i = 0; i < size; i++) {
							var enemy = enemiesFromTeam.Get(i)
							if(hasBeeline(enemy.Item1, enemy.Item2)){
								tag(enemy.Item1, enemy.Item2)
							} 
						}
					}

					// lie down, reload if possible, and hope for the best!
				}
				// END: shootEnemies()
			}

		}  else if (enemyLocated) {

			// shoot twice! if possible
			if (hasBeeline(prevEnemyY, prevEnemyY)) {
				tag(prevEnemyX, prevEnemyY)
				tag(prevEnemyX, prevEnemyY)
				
				// START: moveRandomInTeam()
				var time: integer = (simtime%120)/20
				
				var randomX = 0
				var randomY = 0
				
				switch(time) {
					case 0: {
						randomX = 14
						randomY = 28
					}
					case 1: {
						randomX = 26
						randomY = 44
					}
					case 2: {
						randomX = 27
						randomY = 7
					}
					case 3: {
						randomX = 38
						randomY = 25
					}
					case 4: {
						randomX = 17
						randomY = 18
					}
					case 5: {
						randomX = 33
						randomY = 36
					}
				}

				goTo(randomX, randomY)
				// END: moveRandomInTeam()
			}else {
				// TODO: if possible, check if goal can be reached in reasonable time? if too far, don't go there

				// go there
				if (currStance === 'lying' and actionPoints > 7) {
					changeStance('standing')
				}
				goTo(prevEnemyX, prevEnemyY)


				// START: shootEnemies()
				// stand up if 'lying'
				if (currStance === 'lying' and actionPoints > 7) {
					changeStance('standing')
				}

				var enemies = exploreEnemies()

				if (currStance === 'standing' and actionPoints > 6) {
					changeStance('lying')
				}

				if (length(enemies.Item1) > 0 or length(enemies.Item2) > 0 or length(enemies.Item3) > 0) {

					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					// shoot!
				} else {
					//loop
					for (var i = 0; i < 1000; i++) {}

					// check if team mate has found something
					
					if(enemiesFromTeam.Size() > 0){
						var size = enemiesFromTeam.Size
						for ( var i = 0; i < size; i++) {
							var enemy = enemiesFromTeam.Get(i)
							if(hasBeeline(enemy.Item1, enemy.Item2)){
								tag(enemy.Item1, enemy.Item2)
							} 
						}
					}

					// lie down, reload if possible, and hope for the best!
				}
				// END: shootEnemies()

			}
	
		} else {
			// walk around

			// do we know about a hill?
			var hillsInReachableDistance = new List<Tuple<real, real>>
			each (hill in hills) {
				if(getDistance(hill.Item1, hill.Item2) > -1 and getDistance(hill.Item1, hill.Item2) < 10 ) {
					hillsInReachableDistance.Add(hill)
				}
			}

			if (hillsInReachableDistance.Size() === 0) {
				exploreEnv("hills") // kosetet 1
				each (hill in hills) {
					if(getDistance(hill.Item1, hill.Item2) > -1 and getDistance(hill.Item1, hill.Item2) < 10) {
						hillsInReachableDistance.Add(hill)
					}
				}
			}

			if (hillsInReachableDistance.Size() > 0 and wasOnHillCounter === 0) {
				if (currStance === 'lying' and actionPoints > 8) {
					changeStance('standing')
				}
				var firstHill = hillsInReachableDistance.Get(0)
				var moved = goTo(firstHill.Item1, firstHill.Item2)
				
				if (getDistance(firstHill.Item1, firstHill.Item2) < 1 or not moved) {
					wasOnHillCounter = 40
				}
				
				// START: shootEnemies()
				// stand up if 'lying'
				if (currStance === 'lying' and actionPoints > 7) {
					changeStance('standing')
				}

				var enemies = exploreEnemies()

				if (currStance === 'standing' and actionPoints > 6) {
					changeStance('lying')
				}

				if (length(enemies.Item1) > 0 or length(enemies.Item2) > 0 or length(enemies.Item3) > 0) {

					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					// shoot!
				} else {
					//loop
					for (var i = 0; i < 1000; i++) {}

					// check if team mate has found something
					
					if(enemiesFromTeam.Size() > 0){
						var size = enemiesFromTeam.Size
						for ( var i = 0; i < size; i++) {
							var enemy = enemiesFromTeam.Get(i)
							if(hasBeeline(enemy.Item1, enemy.Item2)){
								tag(enemy.Item1, enemy.Item2)
							} 
						}
					}

					// lie down, reload if possible, and hope for the best!
				}
				// END: shootEnemies()
			} else {
				// no hills available

				if (currStance === 'lying' and actionPoints > 7) {
					changeStance('standing')
				}


				// START: moveRandomInTeam()
				var time: integer = (simtime%120)/20
				
				var randomX = 0
				var randomY = 0
				
				switch(time) {
					case 0: {
						randomX = 14
						randomY = 28
					}
					case 1: {
						randomX = 26
						randomY = 44
					}
					case 2: {
						randomX = 27
						randomY = 7
					}
					case 3: {
						randomX = 38
						randomY = 25
					}
					case 4: {
						randomX = 17
						randomY = 18
					}
					case 5: {
						randomX = 33
						randomY = 36
					}
				}

				goTo(randomX, randomY)
				// END: moveRandomInTeam()

				// START: shootEnemies()
				// stand up if 'lying'
				if (currStance === 'lying' and actionPoints > 7) {
					changeStance('standing')
				}

				var enemies = exploreEnemies()

				if (currStance === 'standing' and actionPoints > 6) {
					changeStance('lying')
				}

				if (length(enemies.Item1) > 0 or length(enemies.Item2) > 0 or length(enemies.Item3) > 0) {

					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'standing'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'kneeling'){ tag(enemie) }
					}
					each ( enemie in enemies.Item1) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item2) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					each ( enemie in enemies.Item3) {
						if(enemie.GetStance() === 'lying'){ tag(enemie) }
					}
					// shoot!
				} else {
					//loop
					for (var i = 0; i < 1000; i++) {}

					// check if team mate hsa found something
					
					if(enemiesFromTeam.Size() > 0){
						var size = enemiesFromTeam.Size
						for ( var i = 0; i < size; i++) {
							var enemy = enemiesFromTeam.Get(i)
							if(hasBeeline(enemy.Item1, enemy.Item2)){
								tag(enemy.Item1, enemy.Item2)
							} 
						}
					}

					// lie down, reload if possible, and hope for the best!
				}
				// END: shootEnemies()
			}
		}
		
		// exploreEnemies() seems to be for free if no actions points remain
		// let's exploit that!
		if (actionPoints === 0) {
			exploreEnemies()
		}

		//loop
		for (var i = 0; i < 1000; i++) {}
		
		stage = (stage/1000000/100)*1000000*100
		
		if (wasOnHillCounter > 0){
			stage = stage + (wasOnHillCounter - 1)*1000000
		}
		
		var doneUpdatingStage = false 
		if(enemiesFromTeam.Size > 0){
			var size = enemiesFromTeam.Size
			for ( var i = 0; i < size; i++) {
				var enemy = enemiesFromTeam.Get(i)
				if(hasBeeline(enemy.Item1, enemy.Item2)){
					stage = stage/1000000
					stage = stage*1000 + enemy.Item2  as integer
					stage = stage*1000 + enemy.Item1  as integer
					doneUpdatingStage = true 

					//tag if we still have action points
					tag(enemy.Item1, enemy.Item2)
					tag(enemy.Item1, enemy.Item2)
				} 
			}
		}

		// final things 
		// - shoot at random location (no max distance)
		// - explore hills?
		// - explore team -> to get hills of team member -> exploreTeam() does not persist, so no use for us!
		// - reload if magazine not full

		if (magazineCount < 5) { reload() }
		else { exploreEnv('hills') }

		refillPoints()
	}